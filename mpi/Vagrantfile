# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# choose how many machines the cluster will contain
N_VMS = 2

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "ubuntu/trusty64"
  # use a minimal amount of RAM for each node to avoid overwhelming the host
  config.vm.provider "virtualbox" do |v|
    v.memory = 256
    v.cpus = 1
  end
  config.vm.network "private_network", type: "dhcp"

  hosts_file = []
  (1..N_VMS).each do |i|
    config.vm.define vm_name = "node#{i}" do |config|
      config.vm.hostname = vm_name
      ip = "192.168.70.#{100+i}"
      config.vm.network "private_network",
        ip: ip,
        virtualbox__intnet: "clusternet"
    end
  end

  script = <<-SCRIPT
    set -x
    apt-get update
    apt-get dist-upgrade -y
    if [[ ! -e /etc/.provisioned ]]; then
      rm /etc/hosts

      for i in {1..N_VMS}; do
        ip="192.168.70.$((100+i))"
        echo "$ip node$i" >> /etc/hosts
      done
      
      wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant -O /home/vagrant/.ssh/id_rsa
      chown vagrant /home/vagrant/.ssh/id_rsa
      ssh-keygen -y -f /home/vagrant/.ssh/id_rsa > /home/vagrant/.ssh/id_rsa.pub
      chmod 600 /home/vagrant/.ssh/id_rsa
      
      for i in {1..N_VMS}; do
        echo "node$i slots=1" >> /home/vagrant/.mpi_hostfile
      done
      chown vagrant /home/vagrant/.mpi_hostfile
      echo "alias mpirun='mpirun --hostfile ~/.mpi_hostfile --mca btl_tcp_if_include 192.168.70.0/24'" >> /home/vagrant/.bashrc
    
      echo "Host *\n\tStrictHostKeyChecking no" > /home/vagrant/.ssh/config

      cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
      apt-get -y install openmpi-bin openmpi-common openssh-client openssh-server libopenmpi-dev libopenmpi1.6-dbg libopenmpi1.6 build-essential htop
      touch /etc/.provisioned
    fi
  SCRIPT
  script.sub! 'N_VMS', N_VMS.to_s
  script.sub! 'N_VMS', N_VMS.to_s
  config.vm.provision "shell", inline: script

end
